#!/usr/bin/env node

/*!
 * This file is part of PAD-Repository
 *
 * Please see the LICENSE file
 */

var fs = require('fs')
  , repository = require('../lib/pad-repository')
  , cmd = require('../lib/utils/cmd-prompt')
  , io = require('../lib/utils/io')
  ;

// usage docs
var usage = [
    ''
  , '  PAD repository manager'
  , ''
  , '  Usage: repopad <command> <path>|<filename>'
  , ''
  , '  where <command> is one of:'
  , '        init cache restore check show watch status add find stats'
  , ''
  , ' Actions:'
  , ''
  , '    -v, --version             Display a version of pad-repository'
  , '    -h, --help                Display this text'
  , '    -f, --force               Force the command'
  , '    -c, --create              With create'
  , '    --buffer-size             The buffer size to procces packages (5 as default)'
  , ''
].join('\n');

var _init = new Date();

/**
 * Input/output path
 */
var _path = '.';

/**
 * An action to call 
 *    like: init, cache, clear, check, status, serve
 */
var action = ''

/**
 * Override flag
 */
var withForce = false;

/**
 * Create flag
 */
var withCreate = false;

/**
 * Buffer size
 */
var bufferSize = 5;

/**
 * Serve port
 */
var port = 5;

/**
 * To Find
 */
var toFind = 5;

/*
 * Proccess arguments
 */
var args = process.argv.slice(2);

// give me args
if (!args.length) { cmd.abort(usage); }

// procces args
var arg;
while (args.length) {
  arg = args.shift();
    switch (arg) {
    case '-h':
    case '--help':
      cmd.abort(usage);
    case '-v':
    case '--version':
      cmd.abort(repository.version);
      break;
    case '-f':
    case '--force':
      withForce = true;
      break;
    case '-c':
    case '--create':
      withCreate = true;
      break;
    case '--buffer-size':
      withForce = true;
      (args.length) 
        ? (bufferSize = parseInt(args.shift()))
        : cmd.abort('--buffer-size requires an argument');
      break;
    case 'init':
      action = 'init';
      break;
    case 'check':
      action = 'check';
      break;
    case 'watch':
      action = 'watch';
      break;
    case 'cache':
      action = 'cache';
      break;
    case 'restore':
      action = 'restore';
      break;
    case 'show':
      action = 'show';
      break;
    case 'status':
      action = 'status';
      break;
    case 'stats':
      action = 'stats';
      break;
    case 'add':
      action = 'add';
      break;
    case 'serve':
      action = 'serve';
      (args.length) 
        ? (port = parseInt(args.shift()))
        : cmd.abort('serve requires an argument (port)');
      break;
    case 'find':
      action = 'find';
      (args.length) 
        ? (toFind = args.shift())
        : cmd.abort('find requires an argument (word)');
      break;
    default:
      _path = arg;
  }
}

// check the action
if ( !(/^(init|cache|check|show|watch|status|add|serve|restore|stats)$/i).test(action) ) {
  console.log('the action `' + action + '` was not found.');
  cmd.abort(usage);
}

// options
var options = {
  action: action,
  path: _path ,
  withForce: withForce,
  bufferSize: bufferSize,
  withCreate: withCreate,
  port: port,
  find: toFind
};

// just do it
(function(repo, ops){

  // the function will be executed
  // if something wrong abort with a Unexpected error
  var befn = function() {
    cmd.abort('Unexpected error.');
  };

  // the ending function
  var endfn = function(err) { 
     if (err) {
        cmd.abort(err); 
     }
     
     var _ends = new Date();
     var diff = _ends - _init;

     if (!repo.isWatching) {
      console.log('');
      console.log('complete on', diff, 'miliseconds'); 
     }
  };

  var action = ops.action,
      opsP = {
        path: ops.path,
        withForce: ops.withForce,
        bufferSize: ops.bufferSize,
        port: ops.port
      };

  repo[action].apply(repo, [opsP, endfn]);
  
})(repository, options)